<?php
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\Entity;
use Drupal\Core\Entity\EntityInterface;
use Drupal\node\Entity\Node;

define('GS_ORDER_NODE_TYPE', 'gs_order');

/**
 * Implements hook_node_presave().
 */
function grafisk_service_order_node_presave(EntityInterface $node) {
  // Set empty Harvest data when creating order.
  if ($node->getType() == GS_ORDER_NODE_TYPE && !$node->id()) {
    $node->field_gs_harvest_data = '{}';
  }
}

/**
 * Implements hook_cron_insert().
 */
function grafisk_service_order_cron() {
  $query = \Drupal::entityQuery('node')
         ->condition('type', GS_ORDER_NODE_TYPE)
         ->condition('field_gs_harvest_data', '{}', '=')
         ->condition('status', NODE_PUBLISHED);
  $ids = $query->execute();

  if ($ids) {
    $orders = Node::loadMultiple(array_values($ids));
    if ($orders) {
      $api = \Drupal::service('grafisk_service_order.harvest_api');
      foreach ($orders as $order) {
        $data = $api->createProject($order);
        $order->field_gs_harvest_data = json_encode($data);
        $order->save();
        // Send notification to admin.
        $mailer = \Drupal::service('grafisk_service_order.mailer');
        $mailer->notifyAdmin('create', $order);
      }
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function grafisk_service_order_node_insert(EntityInterface $node) {
  if ($node->getType() == GS_ORDER_NODE_TYPE && $node->id()) {
    // Send reciept to user.
    $mailer = \Drupal::service('grafisk_service_order.mailer');
    $mailer->notifyUser('create', $node);
  }
}

/**
 * Implements hook_theme().
 */
function grafisk_service_order_theme($existing, $type, $theme, $path) {
  return [
    'order_created_email' => [
      'template' => 'order-created-email',
      'variables' => [
        'logo_url' => '',
        'message' => 'Order created',
        'is_admin' => FALSE,
        'order' => [
          'id' => '',
          'url' => '',

          'department' => '',
          'phone' => '',
          'contact_person' => '',
          'email' => '',

          'title' => '',
          'order_lines' => '',
          'comments' => '',
          'files' => '',

          'ean' => '',
          'marketing_account' => '',

          'delivery_date' => '',
          'delivery_comments' => '',
          'delivery_address' => '',
          'delivery_city' => '',
          'delivery_zip_code' => '',
          'delivery_department' => '',
        ],
        'harvest' => [],
      ],
    ],

    'order_address_label_button' => [
      'template' => 'order/address-label-button',
      'variables' => [
        'order' => []
      ],
    ],

    'order_address_label' => [
      'template' => 'order/address-label',
      'variables' => [
        'order' => [],
        'template_path' => [],
      ],
    ],

    'grafisk_service_order_order_line_formatter' => [
      'variables' => [
        'quantity' => NULL,
        'product_type' => NULL,
      ],
      'template' => 'grafisk-service-order-order-line-formatter',
    ],
  ];
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function grafisk_service_order_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if (!\Drupal::currentUser()->isAnonymous()) {
    if ($entity->getType() === GS_ORDER_NODE_TYPE) {
      $build['grafisk_service_order'] = [
        '#theme' => 'order_address_label_button',
        '#order' => $entity,
        '#weight' => 1000,
      ];
    }
  }
}
