<?php

/**
 * @file
 */

use Drupal\node\Entity\Node;

/**
 * Implements hook_requirements().
 */
function grafisk_service_order_requirements($phase) {
  $requirements = [];
  if ($phase === 'install') {
    if (!class_exists('\Harvest\HarvestAPI')) {
      $requirements['harvest_api'] = [
        'description' => t('HaPi â€“ Harvest API is required.'),
        'severity' => REQUIREMENT_ERROR,
      ];
    }
  } elseif ($phase === 'runtime') {
    $uploadMaxFilesize = _grafisk_service_order_get_bytes(ini_get('upload_max_filesize'));
    $postMaxSize = _grafisk_service_order_get_bytes(ini_get('post_max_size'));

    if ($uploadMaxFilesize < _grafisk_service_order_get_bytes('100M')) {
      $requirements['grafisk_service_order'] = [
        'title' => t('Grafisk service'),
        'description' => t('Ini setting "upload_max_filesize" (@upload_max_filesize) must be greater than or equal to 100M', [
          '@upload_max_filesize' => ini_get('upload_max_filesize'),
        ]),
        'severity' => REQUIREMENT_ERROR,
      ];
    }
    if ($postMaxSize < $uploadMaxFilesize) {
      $requirements['grafisk_service_order'] = [
        'title' => t('Grafisk service'),
        'description' => t('Ini setting "post_max_size" (@post_max_size) must be greater than or equal to "upload_max_filesize" (@upload_max_filesize)', [
          '@post_max_size' => ini_get('post_max_size'),
          '@upload_max_filesize' => ini_get('upload_max_filesize'),
        ]),
        'severity' => REQUIREMENT_ERROR,
      ];
    }
  }

  return $requirements;
}

/**
 * Convert php.ini shorthand value to bytes.
 *
 * @see http://fi2.php.net/manual/en/function.ini-get.php#96996.
 */
function _grafisk_service_order_get_bytes($size_str) {
  switch (substr ($size_str, -1)) {
    case 'M': case 'm': return (int)$size_str * 1048576;
    case 'K': case 'k': return (int)$size_str * 1024;
    case 'G': case 'g': return (int)$size_str * 1073741824;
    default: return $size_str;
  }
}

/**
 * Extract Harvest project id and put into dedicated field.
 */
function grafisk_service_order_update_8301(&$sandbox) {
  $query = \Drupal::entityQuery('node')
    ->condition('type', GS_ORDER_NODE_TYPE);

  $ids = $query->execute();

  if ($ids) {
    $orders = Node::loadMultiple(array_values($ids));
    foreach ($orders as $order) {
      $data = json_decode($order->field_gs_harvest_data->value);
      if ($data) {
        $order->field_gs_harvest_project_id = $data->projectId;
        $order->save();
      }
    }
  }
}
