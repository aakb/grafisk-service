<?php

namespace Drupal\grafisk_service_order\Plugin\Field\FieldFormatter;

use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Field\Plugin\Field\FieldFormatter\StringFormatter;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;

/**
 * Plugin implementation of the 'grafisk_service_order_harvest_data' formatter.
 *
 * @FieldFormatter(
 *   id = "grafisk_service_order_harvest_data",
 *   label = @Translation("Harvest data"),
 *   field_types = {
 *     "string_long",
 *     "string"
 *   }
 * )
 */
class HarvestDataFormatter extends StringFormatter {

  /**
   * {@inheritdoc}
   */
  public function viewElements(FieldItemListInterface $items, $langcode) {
    $elements = [];

    /** @var \Drupal\grafisk_service_order\Service\HarvestApiProxy $api */
    $api = \Drupal::service('grafisk_service_order.harvest_api');

    $order = $items->getEntity();
    foreach ($items as $delta => $item) {
      $data = $api->getData($item->value);
      $field = $this->getSetting('field');

      if ($field === 'completed') {
        $element = [
          '#type' => 'markup',
          '#markup' => (isset($data->active) && $data->active === 'false') ? t('Arkiveret') : '',
        ];
      }
      else {
        // @HACK: Replace $data.
        if ($field === 'projectId' && is_numeric($item->value)) {
          $data = json_decode($order->field_gs_harvest_data->value);
        }
        $value = ($field && isset($data->{$field})) ? $data->{$field} : 'â€“';
        $element = [
          '#type' => 'markup',
          '#markup' => $value,
        ];
        if ($this->getSetting('link_to_project') && isset($data->projectUrl)) {
          $element = [
            '#type' => 'link',
            '#title' => $value,
            '#url' => Url::fromUri($data->projectUrl),
            '#attributes' => [
              'target' => 'harvest',
            ],
          ];
        }
      }
      $elements[$delta] = $element;
    }

    return $elements;
  }

  /**
   *
   */
  public static function defaultSettings() {
    return [
      'field' => 'projectId',
      'link_to_project' => FALSE,
    // TODO: Change the autogenerated stub.
    ] + parent::defaultSettings();
  }

  /**
   *
   */
  public function settingsForm(array $form, FormStateInterface $form_state) {
    return [
      'field' => [
        '#title' => t('Harvest field'),
        '#type' => 'select',
        '#options' => [
          'projectId' => $this->t('Project id'),
          'status' => $this->t('Project status'),
          'completed' => $this->t('Project completed'),
        ],
        '#default_value' => $this->getSetting('field'),
      ],
      'link_to_project' => [
        '#title' => t('Link to project'),
        '#type' => 'checkbox',
        '#default_value' => $this->getSetting('link_to_project'),
      ],
    ];
  }

}
