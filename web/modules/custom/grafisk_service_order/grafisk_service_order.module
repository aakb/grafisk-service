<?php

/**
 * @file
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\node\Entity\Node;
use Harvest\Model\Project;

define('GS_ORDER_NODE_TYPE', 'gs_order');

/**
 * Implements hook_entity_presave().
 */
function grafisk_service_order_entity_presave(EntityInterface $entity) {
  if ($entity->getEntityTypeId() !== 'node') {
    return;
  }

  // Set empty Harvest data when creating order.
  if ($entity->getType() === GS_ORDER_NODE_TYPE && !$entity->id()) {
    $entity->field_gs_harvest_project_id = '0';
    $entity->field_gs_harvest_data = '{}';
  }
}

/**
 * Implements hook_cron().
 */
function grafisk_service_order_cron() {
  $query = \Drupal::entityQuery('node')
    ->condition('type', GS_ORDER_NODE_TYPE)
    ->condition('field_gs_harvest_data', '{}', '=')
    ->condition('status', Node::PUBLISHED);
  $ids = $query->execute();

  if ($ids) {
    $orders = Node::loadMultiple(array_values($ids));
    if ($orders) {
      $api = \Drupal::service('grafisk_service_order.harvest_api');
      foreach ($orders as $order) {
        try {
          $data = $api->createProject($order);
          $order->field_gs_harvest_project_id = $data['projectId'];
          $order->field_gs_harvest_data = json_encode($data);
          $order->save();
          // Send notification to admin.
          $mailer = \Drupal::service('grafisk_service_order.mailer');
          $mailer->notifyAdmin('create', $order);
          // Send receipt to user.
          $mailer = \Drupal::service('grafisk_service_order.mailer');
          $mailer->notifyUser('create', $order);
        }
        catch (\Exception $exception) {
          watchdog_exception('grafisk_service_order', $exception);
        }
      }
    }
  }

  \Drupal::service('grafisk_service_order.harvest_alerter')->cron();
}

/**
 * Implements hook_theme().
 */
function grafisk_service_order_theme($existing, $type, $theme, $path) {
  return [
    'order_created_email' => [
      'template' => 'order-created-email',
      'variables' => [
        'logo_url' => '',
        'message' => 'Order created',
        'is_admin' => FALSE,
        'order' => [
          'id' => '',
          'url' => '',

          'department' => '',
          'phone' => '',
          'contact_person' => '',
          'email' => '',

          'title' => '',
          'order_lines' => '',
          'comments' => '',
          'files' => '',

          'ean' => '',
          'marketing_account' => '',

          'delivery_date' => '',
          'delivery_comments' => '',
          'delivery_address' => '',
          'delivery_city' => '',
          'delivery_zip_code' => '',
          'delivery_department' => '',
        ],
        'harvest' => [],
      ],
    ],

    'order_address_label_button' => [
      'template' => 'order/address-label-button',
      'variables' => [
        'order' => [],
      ],
    ],

    'order_address_label' => [
      'template' => 'order/address-label',
      'variables' => [
        'order' => [],
        'harvest_data' => [],
        'template_path' => [],
      ],
    ],

    'grafisk_service_order_order_line_formatter' => [
      'variables' => [
        'quantity' => NULL,
        'product_type' => NULL,
      ],
      'template' => 'grafisk-service-order-order-line-formatter',
    ],
  ];
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function grafisk_service_order_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if (!\Drupal::currentUser()->isAnonymous()) {
    if ($entity->getType() === GS_ORDER_NODE_TYPE) {
      $build['grafisk_service_order'] = [
        '#theme' => 'order_address_label_button',
        '#order' => $entity,
        '#weight' => 1000,
      ];
    }
  }
}

/**
 * Update Harvest data on projects.
 */
function grafisk_service_order_update_projects($updatedSince = '-1 day') {
  /** @var \Drupal\grafisk_service_order\Service\HarvestApiProxy $api */
  $api = \Drupal::service('grafisk_service_order.harvest_api');

  $updatedSince = new \DateTime($updatedSince);
  $projects = $api->getProjects($updatedSince);

  if ($projects) {
    $projectIds = array_map(function (Project $project) {
      return $project->id;
    }, $projects);
    $query = \Drupal::entityQuery('node')
      ->condition('type', GS_ORDER_NODE_TYPE)
      ->condition('field_gs_harvest_project_id', $projectIds, 'IN');
    $ids = $query->execute();
    $nodes = Node::loadMultiple(array_values($ids));
    $orders = [];
    foreach ($nodes as $node) {
      $orders[$node->field_gs_harvest_project_id->value] = $node;
    }

    foreach ($projects as $project) {
      if (isset($orders[$project->id])) {
        $order = $orders[$project->id];
        $data = json_decode($order->field_gs_harvest_data->value, TRUE);
        $data['active'] = $project->get('active');
        $data['updated-at'] = $project->get('updated-at');
        $data['status'] = $project->get('code') ? $project->get('code') : '';
        $order->field_gs_harvest_data->value = json_encode($data);
        $order->save();
      }
    }
  }
}
